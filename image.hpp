////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file	image.hpp
///
/// @brief	Declares the image class. 
////////////////////////////////////////////////////////////////////////////////////////////////////
#if !defined(_IMAGE_H)
#define _IMAGE_H

#include <cxcore.h>
#include <cv.h>


template<class T>


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class	Image
///
/// @brief	Wrapper for IplImage.
///
/// @author	Hanna Dutkiewicz
/// @date	2010-07-21
////////////////////////////////////////////////////////////////////////////////////////////////////
class Image
{
  private:
		/// @brief The pointer to IplImage
		IplImage* imgp_;	

  public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	Image::Image(IplImage* img=0)
		///
		/// @brief	Constructor. 
		///
		/// @param	img	The image. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Image(IplImage* img=0) {imgp_=img;}


		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	Image::~Image()
		///
		/// @brief	Finaliser. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Image(){imgp_=0;}


		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	void Image::operator=(IplImage* img)
		///
		/// @brief	= casting operator. 
		///
		/// @param	img	The image. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void operator=(IplImage* img) {imgp_=img;}


		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	inline T* Image::operator[](const int rowIndx)
		///
		/// @brief	Array indexer operator. 
		///
		/// @param	rowIndx	The row index. 
		///
		/// @return	The indexed value. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		inline T* operator[](const int rowIndx) {
			return ((T *)(imgp_->imageData + rowIndx*imgp_->widthStep));
		}
};


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @struct	RgbPixel
///
/// @brief	Rgb pixel structure. 
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct{
/// @brief The b
  unsigned char b;	
/// @brief The g
  unsigned char g;
/// @brief The r
  unsigned char r;	
} RgbPixel;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @struct	HsvPixel
///
/// @brief	Hsv pixel structure. 
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct{
/// @brief The h
  unsigned char h;	
/// @brief The s
  unsigned char s;	
/// @brief The v
  unsigned char v;	
} HsvPixel;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @struct	RgbPixelFloat
///
/// @brief	Rgb pixel structure (floating points). 
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct{
/// @brief The b
  float b;	
/// @brief The g
  float g;
/// @brief The r
  float r;	
} RgbPixelFloat;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Image<RgbPixel> RgbImage
///
/// @brief	Defines an alias representing the Image<RgbPixel>.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Image<RgbPixel>       RgbImage;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Image<HsvPixel> HsvImage
///
/// @brief	Defines an alias representing the Image<HsvPixel> .
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Image<HsvPixel>       HsvImage;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Image<RgbPixelFloat> RgbImageFloat
///
/// @brief	Defines an alias representing the Image<RgbPixelFloat> .
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Image<RgbPixelFloat>  RgbImageFloat;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Image<unsigned char> BwImage
///
/// @brief	Defines an alias representing the Image<unsigned char>.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Image<unsigned char>  BwImage;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Image<float> BwImageFloat
///
/// @brief	Defines an alias representing the Image<float>.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Image<float>          BwImageFloat;


template<class T> 


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class	Matrix
///
/// @brief	Matrix class - wrapper for CvMat. 
///
/// @author	Hanna Dutkiewicz
/// @date	2010-07-21
////////////////////////////////////////////////////////////////////////////////////////////////////
class Matrix
{	

  public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	Matrix::Matrix(CvMat* mat=0)
		///
		/// @brief	Constructor. 
		///
		/// @param	mat	The matrix. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Matrix(CvMat* mat=0) {mat_=mat;}


		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	Matrix::~Matrix()
		///
		/// @brief	Finaliser. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		~Matrix(){mat_=0;}


		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	void Matrix::operator=(Matrix* mat)
		///
		/// @brief	= casting operator. 
		///
		/// @param	mat	Another matrix. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void operator=(Matrix* mat) {mat_=mat;}


		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// @fn	inline T* Matrix::operator[](const int rowIndx)
		///
		/// @brief	Array indexer operator. 
		///
		/// @param	rowIndx	The row index. 
		///
		/// @return	The indexed value. 
		////////////////////////////////////////////////////////////////////////////////////////////////////
		inline T* operator[](const int rowIndx) {
			return ((T *)(mat_->data.ptr + rowIndx*mat_->step));
		}

  private:
		/// @brief The pointer to CvMat matrix
		CvMat* mat_;

};


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Matrix<RgbPixel> RgbMatrix
///
/// @brief	Defines an alias representing the rgb matrix .
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Matrix<RgbPixel>		RgbMatrix;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Matrix<unsigned char> BwMatrix
///
/// @brief	Defines an alias representing the bw matrix .
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Matrix<unsigned char>	BwMatrix;


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @typedef	Matrix<double> FMatrix
///
/// @brief	Defines an alias representing the matrix .
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef Matrix<double>			FMatrix;

#endif